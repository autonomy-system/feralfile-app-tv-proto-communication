
syntax = "proto3";
option java_multiple_files = true;
option java_outer_classname = "ControlProto";
option objc_class_prefix = "HLW";

package canvas_control;

// to generate code:
// protoc --plugin=protoc-gen-dart=$HOME/.pub-cache/bin/protoc-gen-dart --dart_out=grpc:lib/src/generated/canvas_control -Iprotos protos/canvas_control.proto

service CanvasControl {
  // Client requests to connect to the server
  rpc Connect (ConnectRequest) returns (ConnectReply) {}

  // Client requests to disconnect from the server
  rpc Disconnect (DisconnectRequest) returns (Empty) {}

  // Client requests to check the status of the device
  rpc Status (CheckingStatus) returns (ResponseStatus) {}

  // Client request to cast a single artwork
  rpc CastSingleArtwork (CastSingleRequest) returns (CastSingleReply) {}

  // Client request to cast a collection
  rpc CastCollection (CastCollectionRequest) returns (CastCollectionReply) {}

  // Client request uncast a single artwork
  rpc UncastSingleArtwork (UncastSingleRequest) returns (UncastSingleReply) {}

  // Client request unCast single/collection
  rpc UnCastArtwork (UnCastRequest) returns (UnCastReply) {}

  //Cast list artwork: client requests cast list artworks (assetToken and (url + mimetype)
  rpc CastListArtwork (CastListArtworkRequest) returns (CastListArtworkReply) {}

  // CancelCasting: request to cancel casting.
  rpc CancelCasting (CancelCastingRequest) returns (CancelCastingReply) {}

  // Append list artwork to casting list: request to append list artwork to the end of casting list.
  rpc AppendListArtwork (AppendArtworkToCastingListRequest) returns (AppendArtworkToCastingListReply) {}

  // Pause current casting artwork: request to pause current artwork.
  rpc PauseCasting (PauseCastingRequest) returns (PauseCastingReply) {}

  // Resume current casting artwork: request to resume current artwork
  rpc ResumeCasting (ResumeCastingRequest) returns (ResumeCastingReply) {}

  // Next artwork: request to cast next artwork.
  rpc NextArtwork (NextArtworkRequest) returns (NextArtworkReply) {}

  // Previous artwork: request to cast previous artwork.
  rpc PreviousArtwork (PreviousArtwortRequest) returns (PreviousArtworkReply) {}

  // Update duration: request to update duration for specified artworks. If  input artwork is not in casting list, ignore.
  rpc UpdateDuration (UpdateDurationRequest) returns (UpdateDurationReply) {}

  // Cast exhibition: request to cast exhibition.
  rpc CastExhibition (CastExhibitionRequest) returns (CastExhibitionReply) {}

  // Client press keyboard
  rpc KeyboardEvent (KeyboardEventRequest) returns (KeyboardEventReply) {}

  // Client rotate
  rpc Rotate (RotateRequest) returns (RotateReply) {}

  rpc TapGesture (TapGestureRequest) returns (GestureReply) {}

  rpc DragGesture (DragGestureRequest) returns (GestureReply) {}

  rpc GetCursorOffset (Empty) returns (CursorOffset) {}

  rpc SetCursorOffset (CursorOffset) returns (CursorOffsetReply) {}
}

message ConnectRequest {
  DeviceInfo device = 1;
}

message DeviceInfo {
enum DevicePlatform {
    IOS = 0;
    ANDROID = 1;
    MACOS= 2;
    TIZENTV = 3;
    ANDROIDTV = 4;
    LGTV = 5;
  }
  // Client device did key
  string device_id = 1;
  // Device name
  string device_name = 2;
  // Device platform
   DevicePlatform platform = 3;
}

message ConnectReply {
  bool ok = 1;
  // Canvas device info
  DeviceInfo canvasDevice = 2;
}

message DisconnectRequest {
  // Client device did key
  string device_id = 1;
}

message DisconnectReply {
  bool ok = 1;
}

message CheckingStatus {
  // Client device did key
  string device_id = 1;
}

message ResponseStatus {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.
  }
  ServingStatus status = 1;
  // The scene id that the device is currently playing
  string scene_id = 2;
}

message CastSingleRequest {
  // tokenId
  string id = 1;
  DragGestureRequest cursorDrag = 2;
}

message CastSingleReply {
  bool ok = 1;
}

message PlayArtwork {
  // tokenId
  string id = 1;
  // duration in seconds
  int32 duration = 2;
  // artwork: play with url and mimeType, has lower priority than token.
  optional CastArtwork artwork = 3;
}

message CastCollectionRequest {
  // collection id
  string id = 1;
  // artworks
  repeated PlayArtwork artworks = 2;
}

message CastCollectionReply {
  bool ok = 1;
}

message CastAssetToken {
  // indexId
  string id = 1;
}

message CastArtwork {
  // artwork previewUrl
  string previewUrl = 1;
  // artwork mimetype
  string mimetype = 2;
}

message CastListArtworkRequest {
  // artworks
  repeated PlayArtwork artworks = 1;
 // casting start time
 string startTime = 2;
}

message CastListArtworkReply {
  bool ok = 1;
}

message CancelCastingRequest {}

message CancelCastingReply {
  bool ok = 1;
}

message AppendArtworkToCastingListRequest {
// artworks
  repeated PlayArtwork artworks = 1;
}

message AppendArtworkToCastingListReply {
  bool ok = 1;
}

message PauseCastingRequest {
}

message PauseCastingReply {
  bool ok = 1;
}

message ResumeCastingRequest {
 int64 startTime = 1;
}

message ResumeCastingReply {
  bool ok = 1;
}

message NextArtworkRequest {
 int64 startTime = 1;
}

message NextArtworkReply {
  bool ok = 1;
}

message PreviousArtwortRequest {
 int64 startTime = 1;
}

message PreviousArtworkReply {
  bool ok = 1;
}

message UpdateDurationRequest {
  repeated PlayArtwork artworks = 1;
}

message UpdateDurationReply {
  int64 startTime = 1;
}

message CastExhibitionRequest {
  // exhibitionId
  string id = 1;
}

message CastExhibitionReply {
  bool ok = 1;
}

message UncastSingleRequest {
  // tokenId
  string id = 1;
}

message UncastSingleReply {
  bool ok = 1;
}


message UnCastRequest {
  // tokenId/Collection Id
  string id = 1;
}

message UnCastReply {
  bool ok = 1;
}

message KeyboardEventRequest {
  int32 code = 1;
}

message KeyboardEventReply {
  bool ok = 1;
}

message Empty {}

message RotateRequest {
  bool clockwise = 1;
}

message RotateReply {
  // return quarter turn after rotate
  int32 degree = 1;
}

message TapGestureRequest {
}

message DragGestureRequest {
  double dx = 1;
  double dy = 2;
  double coefficientX = 3;
  double coefficientY = 4;
}

message ZoomGestureRequest {
}

message GestureReply {
  bool ok = 1;
}

message  CursorOffset {
  double dx = 1;
  double dy = 2;
  double coefficientX = 3;
  double coefficientY = 4;
}

message CursorOffsetReply {
  bool ok = 1;
}
