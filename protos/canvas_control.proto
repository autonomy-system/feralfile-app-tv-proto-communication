
syntax = "proto3";
option java_multiple_files = true;
option java_outer_classname = "ControlProto";
option objc_class_prefix = "HLW";

package canvas_control;

// to generate code:
// protoc --plugin=protoc-gen-dart=$HOME/.pub-cache/bin/protoc-gen-dart --dart_out=grpc:lib/src/generated/canvas_control -Iprotos protos/canvas_control.proto

service CanvasControl {
  // Client requests to connect to the server
  rpc Connect (ConnectRequest) returns (ConnectReply) {}

  // Client requests to check the status of the device
  rpc Status (CheckingStatus) returns (ResponseStatus) {}

  // Client requests to disconnect from the server
  rpc Disconnect (DisconnectRequest) returns (Empty) {}

  // Client request to cast a single artwork
  rpc CastSingleArtwork (CastSingleRequest) returns (CastSingleReply) {}

  // Client request uncast a single artwork
  rpc UncastSingleArtwork (UncastSingleRequest) returns (UncastSingleReply) {}

  // Client press keyboard
  rpc KeyboardEvent (KeyboardEventRequest) returns (KeyboardEventReply) {}

  // Client rotate
  rpc Rotate (RotateRequest) returns (RotateReply) {}

  rpc TapGesture (TapGestureRequest) returns (GestureReply) {}

  rpc DragGesture (DragGestureRequest) returns (GestureReply) {}

  rpc GetCursorOffset (Empty) returns (CursorOffset) {}

  rpc SetCursorOffset (CursorOffset) returns (CursorOffsetReply) {}
}

message ConnectRequest {
  DeviceInfo device = 1;
}

message DeviceInfo {
  // Client device did key
  string device_id = 1;
  // Device name
  string device_name = 2;
}

message ConnectReply {
  bool ok = 1;
}

message CheckingStatus {
  // Client device did key
  string device_id = 1;
}

message ResponseStatus {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.
  }
  ServingStatus status = 1;
  // The scene id that the device is currently playing
  string scene_id = 2;
}

message DisconnectRequest {
  // Client device did key
  string device_id = 1;
}

message DisconnectReply {
  string message = 1;
}

message CastSingleRequest {
  // tokenId
  string id = 1;
  DragGestureRequest cursorDrag = 2;
}

message CastSingleReply {
  bool ok = 1;
}

message UncastSingleRequest {
  // tokenId
  string id = 1;
}

message UncastSingleReply {
  bool ok = 1;
}

message KeyboardEventRequest {
  int32 code = 1;
}

message KeyboardEventReply {
  bool ok = 1;
}

message Empty {}

message RotateRequest {
  bool clockwise = 1;
}

message RotateReply {
  // return quarter turn after rotate
  int32 degree = 1;
}

message TapGestureRequest {
}

message DragGestureRequest {
  double dx = 1;
  double dy = 2;
  double coefficientX = 3;
  double coefficientY = 4;
}

message ZoomGestureRequest {
}

message GestureReply {
  bool ok = 1;
}

message  CursorOffset {
  double dx = 1;
  double dy = 2;
  double coefficientX = 3;
  double coefficientY = 4;
}

message CursorOffsetReply {
  bool ok = 1;
}
